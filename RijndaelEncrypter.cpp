// RijndaelEncrypter.cpp: implementation of the CRijndaelEncrypter class.
//
//////////////////////////////////////////////////////////////////////

#include "CryptTypes.h"
#include "CryptUtils.h"
#include "RijndaelEncrypter.h"

// S-boxes.

const SBOX CRijndaelEncrypter::S =
{
	0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
	0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
	0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
	0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
	0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
	0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
	0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
	0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
	0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
	0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
	0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
	0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
	0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
	0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
	0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
	0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
};

const SBOX CRijndaelEncrypter::InvS =
{
	0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
	0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
	0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
	0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
	0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
	0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
	0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
	0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
	0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
	0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
	0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
	0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
	0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
	0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
	0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
};

// MixColumns multiplication matrixes.

const MATRIX CRijndaelEncrypter::MixColumnMatrix =
{
	{ 0x02, 0x03, 0x01, 0x01 },
	{ 0x01, 0x02, 0x03, 0x01 },
	{ 0x01, 0x01, 0x02, 0x03 },
	{ 0x03, 0x01, 0x01, 0x02 }
};

const MATRIX CRijndaelEncrypter::InvMixColumnMatrix =
{
	{ 0x0E, 0x0B, 0x0D, 0x09 },
	{ 0x09, 0x0E, 0x0B, 0x0D },
	{ 0x0D, 0x09, 0x0E, 0x0B },
	{ 0x0B, 0x0D, 0x09, 0x0E }
};

// Static helper methods.

void CRijndaelEncrypter::GetDataRow(DATA_ROW abRow, const DATA_MATRIX abMatrix, const int iRow)
{
	CCryptUtils::Copy(abRow, abMatrix[iRow], DATA_COLUMNS);
}

void CRijndaelEncrypter::GetDataColumn(DATA_COLUMN abColumn, const DATA_MATRIX abMatrix, const int jColumn)
{
	for (int i = 0; i < ROWS; i++)
		abColumn[i] = abMatrix[i][jColumn];
}

void CRijndaelEncrypter::SetDataRow(DATA_MATRIX abMatrix, const DATA_ROW abRow, const int iRow)
{
	CCryptUtils::Copy(abMatrix[iRow], abRow, DATA_COLUMNS);
}

void CRijndaelEncrypter::SetDataColumn(DATA_MATRIX abMatrix, const DATA_COLUMN abColumn, const int jColumn)
{
	for (int i = 0; i < ROWS; i++)
		abMatrix[i][jColumn] = abColumn[i];
}

void CRijndaelEncrypter::ConvertDataVectorToMatrix(DATA_MATRIX abMatrix, const DATA_VECTOR abVector)
{
	for (int jDest = 0, iSource = 0; jDest < DATA_COLUMNS; jDest++, iSource += ROWS)
		SetDataColumn(abMatrix, &abVector[iSource], jDest);
}

void CRijndaelEncrypter::ConvertDataMatrixToVector(DATA_VECTOR abVector, const DATA_MATRIX abMatrix)
{
	for (int jSource = 0, iDest = 0; jSource < DATA_COLUMNS; jSource++, iDest += ROWS)
		GetDataColumn(&abVector[iDest], abMatrix, jSource);
}

void CRijndaelEncrypter::Substitute(DATA_MATRIX abState)
{
	for (int i = 0; i < ROWS; i++)
		CCryptUtils::Substitute(abState[i], abState[i], S, DATA_COLUMNS);
}

void CRijndaelEncrypter::InvSubstitute(DATA_MATRIX abState)
{
	for (int i = 0; i < ROWS; i++)
		CCryptUtils::Substitute(abState[i], abState[i], InvS, DATA_COLUMNS);
}

void CRijndaelEncrypter::ShiftRows(DATA_MATRIX abState)
{
	CCryptUtils::RotateLeft(abState[1], abState[1], 1, DATA_COLUMNS);
	if (DATA_COLUMNS <= 6)
	{
		CCryptUtils::RotateLeft(abState[2], abState[2], 2, DATA_COLUMNS);
		CCryptUtils::RotateLeft(abState[3], abState[3], 3, DATA_COLUMNS);
	}
	else
	{
		CCryptUtils::RotateLeft(abState[2], abState[2], 3, DATA_COLUMNS);
		CCryptUtils::RotateLeft(abState[3], abState[3], 4, DATA_COLUMNS);
	}
}

void CRijndaelEncrypter::InvShiftRows(DATA_MATRIX abState)
{
	CCryptUtils::RotateRight(abState[1], abState[1], 1, DATA_COLUMNS);
	if (DATA_COLUMNS <= 6)
	{
		CCryptUtils::RotateRight(abState[2], abState[2], 2, DATA_COLUMNS);
		CCryptUtils::RotateRight(abState[3], abState[3], 3, DATA_COLUMNS);
	}
	else
	{
		CCryptUtils::RotateRight(abState[2], abState[2], 3, DATA_COLUMNS);
		CCryptUtils::RotateRight(abState[3], abState[3], 4, DATA_COLUMNS);
	}
}

void CRijndaelEncrypter::MixColumns(DATA_MATRIX abState)
{
	for (int j = 0; j < DATA_COLUMNS; j++)
	{
		VECTOR abTemp, abResult;

		GetDataColumn(abTemp, abState, j);
		CCryptUtils::Mul(abResult, abTemp, MixColumnMatrix);
		SetDataColumn(abState, abResult, j);
	}
}

void CRijndaelEncrypter::InvMixColumns(DATA_MATRIX abState)
{
	for (int j = 0; j < DATA_COLUMNS; j++)
	{
		VECTOR abTemp, abResult;

		GetDataColumn(abTemp, abState, j);
		CCryptUtils::Mul(abResult, abTemp, InvMixColumnMatrix);
		SetDataColumn(abState, abResult, j);
	}
}

void CRijndaelEncrypter::DumpBytes(const char* strMessage, const void* pData, const int nCount)
{
#if 0
	const BYTE* pabData = (const BYTE*)pData;

	cout << strMessage << endl;

	for (int i = 0; i < nCount; i += 4)
		cout << hex << pabData[i] << pabData[i + 1] << pabData[i + 2] << pabData[i + 3] << dec;
	cout << endl;
#endif
}

// Construction/Destruction

CRijndaelEncrypter::CRijndaelEncrypter()
{
	Clear();
}

CRijndaelEncrypter::~CRijndaelEncrypter()
{
	Clear();
}

// Initialize cipher with a new key.

void CRijndaelEncrypter::Init(const KEY_VECTOR abKey)
{
	Clear();
	ExpandKey(abKey);
}

// Clear any key material.

void CRijndaelEncrypter::Clear()
{
	for (int iRound = 0; iRound < ROUNDS + 1; iRound++)
	{
		for (int iRow = 0; iRow < ROWS; iRow++)
			CCryptUtils::Clear(m_abExpandedKeyMatrix[iRound][iRow], DATA_COLUMNS);
	}
}

// Encrypt a data block.

void CRijndaelEncrypter::Encrypt(DATA_VECTOR abOutput, const DATA_VECTOR abInput) const
{
	DATA_MATRIX abState;

	ConvertDataVectorToMatrix(abState, abInput);

	AddRoundKey(abState, 0);

	for (int i = 0; i < ROUNDS - 1; i++)
	{
		Substitute(abState);
		ShiftRows(abState);
		MixColumns(abState);
		AddRoundKey(abState, i + 1);
	}
	
	Substitute(abState);
	ShiftRows(abState);
	AddRoundKey(abState, ROUNDS);

	ConvertDataMatrixToVector(abOutput, abState);
}

// Decrypt a data block.

void CRijndaelEncrypter::Decrypt(DATA_VECTOR abOutput, const DATA_VECTOR abInput) const
{
	DATA_MATRIX abState;

	ConvertDataVectorToMatrix(abState, abInput);

	AddRoundKey(abState, ROUNDS);
	InvShiftRows(abState);
	InvSubstitute(abState);

	for (int i = ROUNDS - 1; i >= 1; i--)
	{
		AddRoundKey(abState, i);
		InvMixColumns(abState);
		InvShiftRows(abState);
		InvSubstitute(abState);
	}
	
	AddRoundKey(abState, 0);

	ConvertDataMatrixToVector(abOutput, abState);
}

// Implementation.

void CRijndaelEncrypter::ExpandKey(const KEY_VECTOR abKey)
{
	DATA_COLUMN abRoundConstant =
	{
		0x01, 0x00, 0x00, 0x00
	};
	BYTE abTempMatrix[ROWS][EXPANDED_KEY_COLUMNS];
	int jDest;
	int iDest, iSource;

	for (jDest = 0, iSource = 0; jDest < KEY_COLUMNS; jDest++)
	{
		for (iDest = 0; iDest < ROWS; iDest++)
			abTempMatrix[iDest][jDest] = abKey[iSource++];
	}

	for (jDest = KEY_COLUMNS; jDest < EXPANDED_KEY_COLUMNS; jDest++)
	{
		DATA_COLUMN abTempColumn;
		int i;

		for (i = 0; i < ROWS; i++)
			abTempColumn[i] = abTempMatrix[i][jDest - 1];

		if (jDest % KEY_COLUMNS == 0)
		{
			CCryptUtils::RotateLeft(abTempColumn, abTempColumn, 1, ROWS);
			CCryptUtils::Substitute(abTempColumn, abTempColumn, S, ROWS);
			CCryptUtils::Xor(abTempColumn, abTempColumn, abRoundConstant, ROWS);

			abRoundConstant[0] = CCryptUtils::Mul(abRoundConstant[0], 0x02);
		}
		else if (KEY_COLUMNS > 6 && jDest % KEY_COLUMNS == 4)
		{
			CCryptUtils::Substitute(abTempColumn, abTempColumn, S, ROWS);
		}

		for (i = 0; i < ROWS; i++)
			abTempMatrix[i][jDest] = abTempMatrix[i][jDest - KEY_COLUMNS] ^ abTempColumn[i];
	}

	for (int iRound = 0; iRound < ROUNDS + 1; iRound++)
	{
		for (int iDest = 0; iDest < ROWS; iDest++)
			SetDataRow(m_abExpandedKeyMatrix[iRound], &abTempMatrix[iDest][iRound * DATA_COLUMNS], iDest);
	}
}

void CRijndaelEncrypter::AddRoundKey(DATA_MATRIX abState, const int iRound) const
{
	for (int i = 0; i < ROWS; i++)
		CCryptUtils::Xor(abState[i], m_abExpandedKeyMatrix[iRound][i], abState[i], DATA_COLUMNS);
}
